HTTP/HTTPS
- HTTP => hyper text transfer protocol
- HTTP internetti web sayfalarını görüntülemek için kullanılan bir protokoldür.
- HTTP Cern'de aynı zamanda www ve HTML i icat eden Tim Berners Lee tarafında geliştirilmiştir.
- Standart HTTP'de tüm bilgiler açık metin olarak gönderilir.
- Metinler açık metin olarak aktarıldığı için hackerlara karşı savunmasızdır. Adres, telefon no gibi hassas kişisel
  verileri yazacak olursanız bu bilgiler web sunucusuna ulaşmak için genel internette dolaşmak zorundadır. Bu da 
  verileri savunmasız hale getirir. Çünkü internetteki herhangi bir yerdeki bilgisayar korsanı bu veriler aktarılırken 
  izleyebilir ya da dinleyebilir.
- Bu güvenlik sorunun ortadan kaldırmak için HTTPS geliştirilmiştir.
- HTTP + S = HTTPS yani hyper text transfer protocol secure. Yani bu bir güvenlik önlemine sahip HTTP'dir.
- HTTPS, HTTP'de alınan verileri şifreler.
- Bu, bilgisayarlar ve sunuclar arasında internet üzerinden transfer olan tüm verilerin okunmasını imkansız hale getirerek güvenli olmasını
  sağlar.
- HTTPS iki protokelde birini kullanarak verileri korur: SSL, TLS

Güvenli HTTP Protokolleri
=> SSL (Secure Socket Layer)
   - SSL (güvenli yuva katmanı) internette güvenliği sağlamak için kullanılan bir protokoldür.
   - SSL ' in genel mantığı verileri saklamak için genel anahtar şifrelemesi kullanmaktır.
   - Bir bilgisayar SSL kullanan bir web sitesine bağlandığı zaman, bilgisayarın web tarayıcısı web sitesinden kendisin tanıtmasını isteyecektir.
   - Ardından web sunucusu bilgisayara SSL sertifikasının bir kopyasını gönderir.
=> TLS (Transport layer security)
   - TLS (aktarım katman güvenliği) en son endüstri standardı şifreleme protokolüdür.
   - Aynı SSL gibi sunucunun, istemcinin kimliğini doğrular ve verileri şifreler.

- Google SSL ile korunmayan web sitelerini güvenli değil diye işaretler. Ve arama sırasında açıkça cezalandıracağını ve geriye atacağını belirtir.

- IP, transport katmanında iki protocol kullanır. TCP (Transmission control protocol) ve UPD (User datagram protocol).
- UDP connectionless, TCP bağlantı temelli bir protocoldür.
- TCP, IP protokolu üzerinden çalışır ve veri gönderimi kurallarını tanımlar
- UDP, TCP/IP protokol takıımındaki iki aktarım katmanı protokolünden biridir ve verilerin bağlantı kurulmada aktarılmasın sağlamaktadır.
- UDP, TCP standartına alternatif bir iletişim protokolüdür ve genellikle internet üzerindeki uygulamalar arasındaki bağlantıda düşük gecikme
  ve az kayıp oranı için tercih edilebilir. 
- UDP, esasen TCP'nin alternatifi olarak anlatılabilir. TCP'den daha hızlı vir protokol olan UDP, ses ve video gönderiminde kullanılır. TCP'den
  hızlı olmasının sebeı ie TCP'nin veri bütünlüğünden ve kimlik doğrulamasından sorumlu olmasıdır.
- Geniş alan ağlarında (WAN) ses ve görüntü aktarımı gibi gerçek zamanlı veri aktarımlarında UDP kullanılır. UDP bağlantı kurulum işlemlerini
  akış kontrolü ve tekrar iletişim işlemlerini yapmayarak veri iletim süresini en aza indirir.
- Gelişmiş bilgisayar ağlarında ortaya çıkan kayıpları önlemek için TCP protokolü yazılmıştır. HTTP, HTTPS, POP3, SSH, SMTP, TELNET ve FTP gibi 
  protokollerin veri iletimi TCP vasıtasıyla yapılır.
- FTP  internete bağlı iki bilgisayar arasında dosya transferini sağlayan bir protokl ve bu işleme hizmet eden uygulamaya verilen isimdir.

- Portlar veri alıp veri götürme görevi görürler.
  Bazı portlar:
  - 21 FTP
  - 22 SSH
  - 23 TELNET
  - 25 SMTP 
  - 80 HTTP
  - 995 POP3

Web 1.0 (1990 - 2000)
- Internetin ilk ve en ilkel dönemi olarak bilinen Web 1.0 dönemi kullanıcının sadece interneti gözlemlediği, kendi içeriklerini
  oluşturmadığı döenm olarak da tanımlanabilir. Uzmanların salt okunur web olarak tanımladığı bu dönemde internet adeta sabit içeriklerden oluşan, tek yönlü
  bilgi akışının gerçekleştiği online bir kütüphane gibi kullanılıyodu.

Web 2.0 (2000 - 2010)
- Web 2.0, sunduğu kullanıcı merkezli ve işbirlikçi ortam ile webi popüler hale geldiği ikinci dönemdir. Bu dönemde kullanıcıların içerik üretimine katılımım ve
  paylaımların olduğu dinamik ve çift yönlü bağlantı platformu meydana gelmiştir. Kullanıcılar yalnızca web sitelerini okumakla kalmayıp aynı zamanda diğer kullanıcılarla
  karşılıklı sosyal etkileşime giriğ bağlantı kurabildiğinden dolayı bu döenm sosyal web olarak da tanımlanmaktadır.

  Facebook, twitter, youtube, instagram, wikipedia gibi web siteleri bu dönemde çıkmışlardır.
  
  ASP.NET, PHP gibi proglamlama dilleri, SOA, RSS, API, AJAX, XML gibi teknolojiler ve uygulamaları bu dönemde yaygın olarak kullnaılmaya başlanılmıştır.

Web 3.0 (2010 - 2020)
- Web 2.0 devrimiyle sanal dünyaya aktarılan içeriklerin anlamlandırılması olarak tamınlana Web 3.0; internet kontrolünün insanın elinden çıktığı, verilerin
  doğrudan bilgisayarlar tarafında okunabilecek şekilde yapılandırıldığı ve etiketlendiği, yapay zeka yaklaşımları ve teknikleri gib yazımsal çözümlerle yorumlanıp akıllı hale getirildiği bir web
  ortamını işaret etmektedir. Bu nedenle bu dönem semantik web dönemi ya da makine öğrenmesinin geliştiği dönem olarak da adlandırılabilir.
  
  Web 3.0, reklam ve pazarlama dünyasında büyük bir devrim yaratmış ve kişiye özel hazırlanan içeriklerin ortaya çıkmasını sağlamıştır. Gelişmiş algoritmalar ve birbirleriyle iletişim
  halinde olan veritabanı sistemleri sayesinde, kullanıcılara tercihlerine ve ilgi alanlar  göre önceden ziyaret ettiği yer, alıoşveriş yaptığı mekan, beğendiği sayfa vb. kriterler ile alakalıo öneriler
  reklamlar  ve benzer sonuçlar kişiselleştirilmiş olarak gösterilir.

Web 4.0 (2010 - 2030)
- Kişisel dosyaların, verilerin ve içeriklerin depolanmasında internet tabanlı bilişim (cloud) uygulamalarının öne çıktığı, işletim sisteminden tüm uygulamalara kadar her şeyin fiziksel disklerden
  uzaklaşarak tamamıyla sanal networkler üzerinde kurulduğu, gerçek ve sanalın iç içe geçtiği bir web teknolojisidir.

  Web 4.0 teknolojisinde yapay zeka ve arttırılmış gerçeklik teknolojisi ön plana çıkmaktadır. Kişisel asistanlar olan bilgisayarlardan sanal gerçekliklere, 
  hologramlara, tüm ev aletlerinin internete bağlanmasına (nesnelerin interneti) kadar makineler ve insanlar arasında son derece akıllı etkileşimler olacağı ve makinelerin 
  internette yer alan içeriği yorumlayıp anlamlandırabilecek zeka düzeyine ulaşarak, en yüksek performansla en kaliteli sonuçlara ulaştıracağı bir internet formunu ifade etmektedir. 
  Bu nedenle, bu dönem “simbiyotik web” ya da “akıllı web” dönemi olarak ta adlandırılmaktadır. İnsan gibi düşünebilen yapay zeka algoritmaları sayesinde web ve kullanıcılar
  arasındaki ilişki daha kişiselleştirilmiş olarak karşımıza çıkar.
  
Logging
- .NET kendi içerisinde graylog ve serilog gibi logging kütüphaneleri barındırır.
- Loglama genel olarak programda yaptığımız işlerin kaydının tutulmasıdır. 
- debug, ınfo , error gibi türleri vardır
- Logları consola, herhangi bir dosyaya veya clouda kaydedebilriiz.
- Serilog.sinks : serilog çıktılarını kayıt edebileceğimiz data platformları serilog.sinks altında toplanır.
- Serilog seq, topladığımız logları görselleştirdiğimz bir platformdr.

- C# da hata verebilecek satırları try catch bloklarıyla belirtebiliriz.
- bazı örnek exceptionlar; StackOverflowException, ArithmeticException (DivideByZeroException, NotFiniteNumberException, OverFlowException), ValidationException

- Elimizde string s = "123"; olduğunu varsayalım, eğer bu stringi int e donuştürmek istiyorsa Convert.ToInt32() fonksiyonunu kullanabiliriz.
- aynı şekilde int a = 123; olduğunu varsayalım, stringe dönüştürmek için Convert.ToString() kullanılabilir.

Derinlemesine encapsulation
- Encapsulation, nesnelerdeki fieldların kontrollü bir şekilde dışarı açılmasıdır.
- Nesneleri başkalarının tarafından yanlış kullanılmasında korumak için kontrolsüz değişime kapamaktır.
- Mesela biri bizden para istediği zaman ona direk cüzdanımızı vermektense, cüzdanın içinden parayı biz alıp veririz.
  Burda parayı enkapsüle etmiş oluyoruz. Eğer direk cüzdan verseydik içinden istediği gibi para çıkarır/eklerdi.
  Parayı almak isteyen paraya değil biz erişiyor. Biz ona parayı veriyoruz (aracı oluyoruz).
- Eskiden encapsulation;
  class MyClass
  {
 	int a;
	public int AGet()
      {
		return this.a;
	}
	public void ASet(int value)
      {
		this.a = value;
	}
  }
 
  Suan encapsulation;
  class MyClass
  {
	int a;
	public int A
	{
		get // sadece get kullanılırsa readonly
		{
			return a;
		}
		set // sadece set kulllanılırsa wrıteonly
		{
			a = value;
		}
	}
  }

  kisa yol;
  
  class MyClass
  {
	public int a { get; set; }
  }

- Init only property, class'ın instancesini ilk oluşturduğumuz zaman değer verip sonrasında readonly olark kalmasıdır.
  Örneğin;
  Book c =  new Book
  {
	Author = "Berkay"
      Page = 200
  }

  c.Author = "Başkası";  // hata verir, çünkü author burada readonly dir. Sadece obje ilk oluşturulduğunda değer atanabilir.

  Init-only property'i class içerisinde böyle tanımlanır;
  class Book
  {
	public string Author { get; init; }
      public int page { get; init; }
  }

- get keywordu olmada init kullanılamaz. (set keywordu de olmaz)
- Eğer bir obje içerisinde tek bir property de değişmezlik isteniyorsa init-only kullanılır.
- Eğerki bir objeyi bütünsel olarak değişmze yapmak istiyorsak records kullanırız.
- Record bir objenin bütünen değişmez olarak kalmasını sağlamakta ve bu durumu güvence altına almaktadır.
  Böylece bu obje değeri değişmiyceğnden dolayı esasında objeden ziyade değer gözüyle bakılan bir yapıya dönüşmektedir
- Nesne ön plandaysa class, nesnenin değerleri ön plandaysa recorddur.
- Record da bir classtır. Sadece nesnelerden ziyade değerleri ön plana çıkaran classtır.
- Elimizde bir classtan üretilen x ve y adında 2 instance olsun. Equals(x, y) her ne olursa olsun false döndürücektir.
- Eğer elimzde bir record'dan üretilen 2 instance olsun a b. Bu instance'lara verilen değerler aynın olduğu sürece Equals(a, b) true döndürücektir.
- Çünkü recod'da değer ön plandadır.

Record tanımlama; // Özünde bir class oldğu için class'a tanımlanabilen her şey tanımlanır (Constructor, static ctor vb ...)

  record MyRecord
  {
	public int a { get; set; } // illa init olmak zorunda degil (oladabilir)
  }

  class MyClass
  {
 	public int a { get; set; }
  }

  Yukarıda tanımlanan record ve classı kullanarak aşağıdaki örneğe bakalım.
  
  MyRecord r1 = new MyRecord()
  {
 	a = 5
  };

  MyRecord r2 = new MyRecord()
  {
 	a = 5;
  };

  MyClass m1 = new MyClass()
  {
 	a = 5
  };

  MyClass m2 = new MyClass()
  {
 	a = 5
  };
  

  r1.Equals(r2) ------>> True !!!
  m1.Equals(m2) ------>> False !!!

- Record'lar referans türlü yapılardır.!

With Expressions nedir;
- Elimizde şöyle bir record olsun;

  record Employee
  {
	public string name { get; init; }
	public string surname { get; init; }
 	public int birthDate { get; init; }
      public int age { get; init; }
 	public int position { get; init; }
  }

  Employee e1 = new Employee()
  {
	name = "Berkay"
	surname = "Ates"
      birthDate = 2004
      age = 19
      position = 1
  };

- Daha sonradan berkay'ın pozisyonun değiştirmek istediğimizde yeni bir record oluşturmamız gerekicek. Ama eğer sadece 5 tane 
  property değilde 50 tane property olsaydı bunların hepsini tek tek yeniden yazmak hem zaman hem de masraf olur.
  Employee e2 = new Employee()
  {
	name = "Berkay"
	surname = "Ates"
      birthDate = 2004
      age = 19
      position = 3 // Sadece pozisyon degisti
  };

  O yüzden sadece değiştiriceğimiz property'leri belirterek yenisini oluşturabiliriz.
  Örneğin; 

  Employee e2 = e1 with { position = 3 };

  Birden çok özelliğide değiştirebliriz;

  Employee e2 = e1 with { surname = "başka", age = 21, position = 5 };





























